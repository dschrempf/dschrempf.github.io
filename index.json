[{"categories":["Coding"],"contents":"The Algebraic Graphs Haskell library (Alga) is a fast, minimalist, and elegant approach to working with graphs that allows for equational reasoning about the correctness of algorithms. For reference, please also see the accompanying paper.\nThe advantages are:\n algebraic graphs have a small core with just four graph construction primitives; the core has a mathematical structure characterized by a set of laws or properties.  A directed graph in the mathematical sense is a set \\(V\\) of vertices \\(v_i\\) together with a set \\(E\\) of directed edges \\((v_i, v_j)\\), and is denoted \\((V,E)\\). The beauty about algebraic graphs is that they are not defined explicitly by lists of vertices and edges but in a recursive manner, similar to the definition of algebraic trees.\ndata Graph a = Empty | Vertex a | Overlay (Graph a) (Graph a) | Connect (Graph a) (Graph a)  A graph is either empty ε, consists of a single vertex v, or it is somehow constructed by a combination of two sub-graphs using the binary construction operators Overlay \\((+)\\) or Connect \\((*)\\).\n The overlay of two graphs is the union of vertices and edges\n\\begin{align} (V_1, E_1) + (V_2, E_2) = (V_1 \\cup V_2, E_1 \\cup E_2). \\end{align}\n The connection of two graphs additionally creates edges between the vertices of the two graphs\n\\begin{align} (V_1, E_1) * (V_2, E_2) = (V_1 \\cup V_2, E_1 \\cup E_2 \\cup V_1 \\times V_2). \\end{align}\n\\((V_1 \\times V_2)\\) is the set of all edges from vertices of \\(V_1\\) to vertices of \\(V_2\\). For example, if \\(V_1 = \\{1,2\\}\\), and \\(V_2 = \\{3,4\\}\\), then\n\\begin{align} (V_1 \\times V_2) = \\{ (1,3), (1,4), (2,3), (2,4) \\}. \\end{align}\nOnly the connect operation allows the creation of new edges.\n  The algebraic properties of the the Graph data type are collected in a type class which is also called Graph.\nclass Graph g where type Vertex g empty :: g vertex :: Vertex g -\u0026gt; g overlay :: g -\u0026gt; g -\u0026gt; g connect :: g -\u0026gt; g -\u0026gt; g  The definition involves a type synonym family, which is a function on the type level. The type synonym family specifies how the type of a vertex can be extracted from the data type instance.\nA valid Graph instance should fulfill the following laws:\n \\((G, +, \\epsilon)\\) is an idempotent commutative monoid. A monoid is an algebraic structure with an associative binary operation and an identity element. Idempotent means that \\(\\forall x \\in G: x + x = x\\). \\((G, \\ast, \\epsilon)\\) is a monoid. \\(\\ast\\) distributes over \\(+\\). That is, \\(1 \\ast (2 + 3) = (1 + 2) \\ast (1 + 3)\\).  This structure is very close to an idempotent semiring. The differences are:\n The identity elements \\(\\epsilon_+\\) and \\(\\epsilon_{\\ast}\\) are the same. Consequently, \\(\\epsilon_+\\) is not an annihilating element and it is wrong that \\( \\forall x \\in G: \\epsilon_+ \\ast x = 0 \\).  Further, we have the decomposition law:\n\\begin{align} x \\ast y \\ast z = x \\ast y + x \\ast z + y \\ast z. \\end{align}\nThe string decomposition law is a sufficient condition to induce the following statements.\n The identities of \\(+\\) and \\(\\ast\\) are equal. \\(+\\) is idempotent.  The binary operators \\(+\\) and \\(\\ast\\) are closed, and together with \\(\\epsilon\\) and \\(v\\), algebraic graphs are complete. In particular, we cannot create algebraic graphs that are not graphs in the mathematical sense, and all graphs can be represented using algebraic graphs.\nThe construction of a specific graph is not identifiable. Similar to \\(8=5+3\\) and \\(8=4+4\\), we can generate a graph by choosing two difference bipartitions and overlay them. More basic, \\( \\forall x \\in G\\) we have\n\\begin{align} x = x \\ast \\epsilon. \\end{align}\nThe canonical form of a given graph \\(g = (V_g, E_g)\\) is\n\\begin{align} g = \\sum_{v \\in V_g} v + \\sum_{(u,v) \\in E_g} u \\ast v. \\end{align}\nWe can define a partial order on graphs by\n\\begin{align} x \\le y \\iff x + y = y. \\end{align}\nThis is exactly the usual definition of a sub graph.\n\\begin{align} x \\subseteq y \\equiv x + y = y. \\end{align}\nA graph instance, additionally having multiplicative commutativity\n\\begin{align} x \\ast y = y \\ast x \\end{align}\nrepresents an undirected graph. In this case, the strong decomposition law also induces associativity of \\(\\ast\\).\nThe algebraic way of thinking about graphs and how to manipulate them was new to me. Nonsense graph objects cannot be created at all, and so, an important source of bugs is eliminated. This principle is an excellent example of the dogma parse, don\u0026rsquo;t validate, for which Haskell forms an excellent framework.\n","permalink":"https://dschrempf.github.io/coding/2019-11-21-algebraic-graphs/","tags":null,"title":"Algebraic graphs"},{"categories":null,"contents":"","permalink":"https://dschrempf.github.io/search/","tags":null,"title":"Search"},{"categories":null,"contents":" Deutsch \u0026lt;2019-08-17 Sat\u0026gt;  Lärm: Je schneller, desto LAUTER!!!, derStandard. Wo kann man noch Ruhe finden?\n\u0026lt;2017-11-17 Fri\u0026gt;  Appell für Umweltschutz: \u0026ldquo;Warnung an Menschheit\u0026rdquo; von 15.000 Forschern, derStandard. In acht von neun entscheidenden Problemfeldern hat es seit 1992 Rückschritte gegeben.\n\u0026lt;2017-11-13 Mon\u0026gt;  Schriftsteller Elsberg über CRISPR/Cas9: Was, wenn Gott sich geirrt hat?, derStandard. In der postfaktischen Debatte über Gentechnik wird vermengt, was man auseinanderhalten sollte.\n\u0026lt;2017-11-06 Mon\u0026gt;  Es gibt zu viele Messenger – und einen klar besten: Signal, derStandard. Nutzer sprechen mittlerweile über dutzende verschiedene Plattformen miteinander, am klügsten wäre jedoch die Einigung auf Signal.\nEnglish \u0026lt;2019-08-30 Fri\u0026gt;  The Secret Shame of Middle-Class Americans, TheAtlantic. Nearly half of Americans would have trouble finding $400 to pay for an emergency. I’m one of them.\nEspañol \u0026lt;2016-09-22 Thu\u0026gt;  “A veces, hasta los paranoicos tenemos razón”, elPaís. Los que me preocupan son todos esos jóvenes ignorantes que pasan de todo porque dicen que no tienen nada que ocultar. Es ese tipo de gente que no se preocupa por el mundo en el que vive, porque se violen los derechos, las libertades que muchos antes defendieron en la Constitución. Me preocupa la pasividad que veo a mi alrededor.\n\u0026lt;2018-09-04 Tue\u0026gt;  El genetista italiano que desmontó el concepto de raza, elPaís. “El racismo es un antiguo flagelo de la humanidad”. “Pensamos que la ciencia sea objetiva. La ciencia está modelada por la sociedad porque es una actividad humana productiva que necesita tiempo y dinero, pues está guiada y dirigida por aquellas fuerzas que en el mundo ejercen el control sobre el dinero y sobre el tiempo. Las fuerzas sociales y económicas determinan en larga medida lo que la ciencia hace y cómo lo hace”.\n","permalink":"https://dschrempf.github.io/links/","tags":null,"title":"Links to newspaper articles"},{"categories":["Coding"],"contents":"I have been working on Markov chains for quite a while now and wanted to assess how Haskell can deal with simulating a simple, discrete chain.\nMany sources can be found online. The code presented here is partly taken from a question on stackoverflow. However, I was unsatisfied with the nomenclature and parts of the code. So I refactored most of it. Also, there is a Haskell library markov-chain, which I am unsatisfied with because of code readability (it\u0026rsquo;s pretty abstruse). Furthermore, I looked through a lengthy post about using Markov chains to simulate interaction of magnetic spins using the Ising model. The concept of a Markov chain is explained well in this article but I believe that the example is too complicated to understand in a reasonable amount of time. Also, the Repa package is used to represent the transition matrices. This seemed a little bit of an overkill to me, so I decided to go with maps.\nYou can also download the source code of the following post.\nIn this example, we will handle sentences with words. So our states are words which are strings. It is also convenient to introduce some type synonyms.\nmodule Main where import qualified Control.Monad.Random as R import qualified Data.Map as M -- | For better readability of the code, it is convenient to distinguish between -- the source and the target. type Source = String type Target = String -- | Transition from 'Source' to 'Target' observed in a sample. type Transitions = [(Source, Target)] -- | A 'Target' with associated frequency. type TargetF = (Target, Rational)  As mentioned before, the transition matrix is represented using a map. This might not be very efficient but it is easy to understand. The keys are just all the words that we can start from. The values are, for each source, the targets that we can jump to and their respective frequencies in the data.\ntype TransitionMatrix = M.Map Source [TargetF]  This function is the heart of the simulation. For a given transition probability matrix and an initial string add a new word until a stop condition is reached. Here, the stop condition is the end of a sentence (a period \u0026ldquo;.\u0026rdquo;).\ngenerateSequence :: (R.MonadRandom m) =\u0026gt; TransitionMatrix -\u0026gt; String -\u0026gt; m String generateSequence tm s -- We have to test first, if the string is not null, otherwise 'last' throws -- an exception. | not (null s) \u0026amp;\u0026amp; last s == '.' = return s | otherwise = do s' \u0026lt;- R.fromList $ tm M.! s ss \u0026lt;- generateSequence tm s' -- Only add a space after another word. return $ if null s then ss else s ++ \u0026quot; \u0026quot; ++ ss  The next functions are used to fill the transition matrix given a list of observed transitions.\n-- | Add a target with its frequency to a list of targets with their -- frequencies. addTargetF :: TargetF -\u0026gt; [TargetF] -\u0026gt; [TargetF] addTargetF (t, f) ts = case lookup t ts of Nothing -\u0026gt; (t, f) : ts Just n -\u0026gt; (t, n+f) : filter notT ts where notT (r, _) = r /= t -- | Add more targets and their frequencies to a list of targets with their -- frequencies. This function is needed because 'M.insertWith' requires an -- inserting function of type (a -\u0026gt; a -\u0026gt; a). addTargetFs :: [TargetF] -\u0026gt; [TargetF] -\u0026gt; [TargetF] addTargetFs tsA tsB = foldr addTargetF tsB tsA -- | Convert the observed transitions to the transition rate matrix. transitionsToMatrix :: Transitions -\u0026gt; TransitionMatrix transitionsToMatrix = foldr insert M.empty where insert t = M.insertWith addTargetFs (fst t) [(snd t, 1.0)]  Now, we need a collection of samples and a way to retrieve all the observed transitions. The start of sentences is a little bit tricky. We kind of introduce a new state here, the empty string \u0026ldquo;\u0026rdquo;, which is followed by the first words of the provided sentences.\n-- | Collect all transitions from one word to the next. getTransitions :: [String] -\u0026gt; Transitions getTransitions (s:ss) = zip (\u0026quot;\u0026quot;:ws) ws ++ getTransitions ss where ws = words s getTransitions _ = [] -- | A collection of samples. samples :: [String] samples = [ \u0026quot;I am a monster.\u0026quot; , \u0026quot;I am a rock star.\u0026quot; , \u0026quot;I want to go to Hawaii.\u0026quot; , \u0026quot;I want to eat a hamburger.\u0026quot; , \u0026quot;I have a really big headache.\u0026quot; , \u0026quot;Haskell is a fun language.\u0026quot; , \u0026quot;Go eat a big hamburger.\u0026quot; , \u0026quot;Markov chains are fun to use.\u0026quot; ]  And that\u0026rsquo;s already it. We can combine and execute our functions in the following way.\nmain :: IO () main = do s \u0026lt;- generateSequence (transitionsToMatrix $ getTransitions samples) \u0026quot;\u0026quot; print s  E.g.,\n\u0026gt; main \u0026quot;I am a big hamburger.\u0026quot;  Of course, the next step is to remove the String type dependency so that we can use our chain for arbitrary types. Then, we might try to convert our code into simulating a continuous-time Markov process, but this is another topic.\n","permalink":"https://dschrempf.github.io/coding/2018-02-10-markov-chains-in-haskell/","tags":null,"title":"Markov chains in Haskell"},{"categories":["Linux"],"contents":"Sometimes you discover online resources that you want to remember and share. These tutorials by the developers of iptables (mainly Paul \u0026lsquo;Rusty\u0026rsquo; Russell) are one of those gems. They discuss how the internet works, how packets can be adequately filtered and how a firewall can be setup.\nEnjoy!\n","permalink":"https://dschrempf.github.io/linux/2017-09-13-networking-tutorials/","tags":null,"title":"Networking HOWTOs"},{"categories":["Linux"],"contents":" [2019-03-01 Fri]  See comment below; some Linux operating systems already provide native support for the Marvell RAID controller in legacy mode.\nMarvell SATA controller Recently I purchased an HPE ProLiant MicroServer Gen10 which comes with the Marvell SATA controller 88SE9230, also called Marvell Storage Utility (MSU). As far as I know, this controller has an ARM chip to provide RAID 0 (non-redundant combination of disks), RAID 1 (straight mirroring) or RAID 10 (a combination of RAID 0 and RAID 1).\nNeither Marvell nor HPE do provide drivers for generic Linux systems but they do provide a package for ClearOS which uses the Red Hat Package Manager (RPM).\nInitially, I tried to manage the RAID using the Marvell BIOS utility which can be accessed by the EFI shell. The BIOS utility and the user guide can be downloaded from the HPE support center. However, this procedure is slow and complicated, especially if the server is headless, as in my case. Furthermore, monitoring the disks with SMART data is also impossible. So I decided to invest some time in amending the ClearOS package for Arch Linux and provide an AUR package.\nMarvell controller package I had serious trouble running the original scripts and daemons because they are (a) written for ClearOS and (b) expect the generic but outdated SCSI kernel module sg to be loaded. I provide replacements with the same functionality:\n MSUAgent - The MSU Event Manager. MSUWebServer - The MSU Web Server (manual access at port 8045). MSUStart - A small script to access the web interface.  These scripts also pull the sg module in case it is not loaded.\nFor my purposes however (I do not need a web interface), the MSU client mvcli, which is located in the folder /opt/marvell/storage/cli is all I need. Don\u0026rsquo;t forget to manually load the sg module, which sets up the SCSI devices for this script, e.g., with\nsudo modprobe -a sg  Then, the SMART data can be retrieved, e.g., with\nsudo /opt/marvell/storage/cli/mvcli smart -p 0  Awesome :-)!\nIn the course of this project, I also stumbled upon other very useful SCSI related software: lsscsi, sg3_utils, sdparm, hdidle.\nI am still having trouble with monitoring temperature (e.g., CPU temperature), please leave a note if you know an easy way to achieve this.\n","permalink":"https://dschrempf.github.io/linux/2017-09-05-hpe-microserver-msu/","tags":null,"title":"Marvell Storage Utility on HPE ProLiant MicroServer Gen10"},{"categories":["Coding"],"contents":"Folds are complicated themselves, but monadic folds always have blown my mind. In what follows, I try to dissect foldlM for a specific example.\nMonadic folds can be used to perform a series of actions that depend on the previous output. The following function produces an action b from a value a also taking into account the output of the previous action b.\nf :: (b -\u0026gt; a -\u0026gt; m b)  And here the definition of foldlM (which is the same as foldM).\nfoldlM :: (Foldable t, Monad m) =\u0026gt; (b -\u0026gt; a -\u0026gt; m b) -\u0026gt; b -\u0026gt; t a -\u0026gt; m b foldlM f z0 xs = foldr f' return xs z0 where f' x k z = f z x \u0026gt;\u0026gt;= k  Let\u0026rsquo;s have a look at an example. The following function performs n jumps of a Markov chain starting from a given State s (an integer) according to a transition probability matrix ProbMatrix p (don\u0026rsquo;t worry about the state space, or the state space size, it does not matter). At the moment, I am not sure how to access or store the actual chain. This could be done by an equivalent of scanl for general monads, which I was unable to find.\njumpN :: (Monad m) =\u0026gt; State -\u0026gt; ProbMatrix -\u0026gt; Int -\u0026gt; m State jumpN s p n = foldM jump s (replicate n p) jump :: (Monad m) =\u0026gt; State -\u0026gt; ProbMatrix -\u0026gt; m State  And specifically, with p being any transition probability matrix\njumpN 0 p 2 = foldM jump 0 [p, p]  Now we use the definition of foldM\njumpN 0 p 2 = foldr f' return [p, p] 0 where f' x k z = jump z x \u0026gt;\u0026gt;= k  which leads to\njumpN 0 p 2 = f' p (foldr f' return [p]) 0 = f' p (f' p (foldr f' return []) 0 = f' p (f' p (return)) 0 = f' p (f' p return) 0 = jump 0 p \u0026gt;\u0026gt;= (f' p return)  And finally, we got what we wanted. This is the first time, that we see that first, we perform a jump from zero and use the output to feed it to the next jump.\njumpN 0 p 2 = jump 0 p \u0026gt;\u0026gt;= (f' p return) = do s' \u0026lt;- jump 0 p f' p return s' = do s' \u0026lt;- jump 0 p (jump s' p \u0026gt;\u0026gt;= return) = do s' \u0026lt;- jump 0 p s'' \u0026lt;- jump s' p return s''  Holy crap, I am not sure if understanding this was worth the pain :-).\n","permalink":"https://dschrempf.github.io/coding/2017-07-20-folding-around-monads-in-haskell/","tags":null,"title":"Happy folding around monads in Haskell"},{"categories":["Linux"],"contents":" I like a lot of stuff that Google is doing, especially that it supports open source. However, I really dislike their attitude towards user privacy. That is why I decided to get rid of Google on my Android phone. However, I had to solve some problems in order to keep user-friendliness at a high level and to be able to use all applications that I need.\nThe main issues are:\n Which ROM do I use? How do I install software and keep it up to date? How do I synchronize all my contacts and calendar? Can I replace applications that do not run without Google Play Services?  The answers are:\nCyanogenmod without Open GApps I have been using Cyanogenmod for quite some time now and I am very happy with it. After a complete backup, I formatted every possible partition on my phone and did a clean reinstall without Open GApps. This left me with a Google-less Android install.\nApplication management Use F-Droid. For applications that are not available in F-Droid, use a service that provides APK files of Google Play Store applications.\nThis is the main drawback, because this service has to be trusted in that it does not alter the APK files in any way. I decided to use APKPure because it comes with an application that can update all installed applications. I compared the md5 check sums of randomly chosen APK files from APKPure with the one from the Google Play Store and could not find any differences. This problem of completely trusting an unknown organization is still bugging me but I did not find another solution so far (especially because all application stores are incomplete).\nContact and calendar For contact and calendar synchronization, I use a Raspberry Pi with Nextcloud (or Owncloud) together with DavDroid on the phone (which is available on F-Droid). I am sure there are other services available that do not require an extensive server setup like this one.\nReplacement of Google applications I replaced Google Maps with OsmAnd; Gmail with the native Android mail client; I never used Google Now nor Hangouts nor any other Google application.\nSo far, this was way easier than I thought. Ironically, a local application that provides information about public transport was the only one that complained about Google Play Services being non-existent. That\u0026rsquo;s when I dived into this issue and found microG, an open source library that provides replacements for a lot of functions usually provided by Google Play Services.\nmicroG The setup on Cyanogenmod with Android 6.0.1 is tough because system spoofing needs to be available. This can be done using Haystack or Xposed (do not follow both instruction sets).\nInstallation of Haystack A detailed explanation can be found on the GitHub page.\nInstallation of Xposed  With F-Droid, install Xposed Downloader. With Xposed Downloader, download the latest Xposed framework and the Xposed Installer. In Recovery mode, install the latest Xposed framework (always wipe cache). Wipe cache and reboot; check if the Xposed framework is working correctly (start Xposed installer). With Xposed, download FakeGApps and activate it; reboot.  Installation of microG Services Core  With F-Droid, activate the microG repository. With F-Droid, install microG Services Core, microG Services Framework and a network location backend (e.g., MozillaNlpbackend). With microG, open settings and check if spoofing support is enabled (Self-Check). With microG, enable everything and also the network location provider backend. And yea, it works! If you have installed applications that use Google Cloud Messaging (like Signal) before, you have to either reinstall them, or re-register to the Google servers, otherwise message delivery may be delayed.  Conclusion Installing Android without Google Play Services was way easier than I thought. However, to enable applications that require certain features like the messaging or the location interface of Google Play Services, extensive tinkering is necessary.\n","permalink":"https://dschrempf.github.io/linux/2016-08-05-android-without-google/","tags":null,"title":"Get rid of Google"},{"categories":["Linux"],"contents":"Autojump is a cd command that learns! It enables you to easily navigate directories from the command line:\n Autojump on GitHub  It is readily available in most Linux distributions. The sole thing that has to be done manually is sourcing a script in your .bashrc.\nsource /etc/profile.d/autojump.sh  Jumping around with j is awesome :-)!\n","permalink":"https://dschrempf.github.io/linux/2016-05-20-autojump/","tags":null,"title":"Autojump"},{"categories":["Coding"],"contents":"[2016-04-09 Sat]  I extended my set of C++ programs to include a simulator for generic continuous-time Markov chains. I.e., any transition rate matrix can be used.\nIf you are interested, just get the GitHub repository and compile the whole set of programs with make all. Documentation can be found in the doc/ folder (check the CTMC class).\nThere is a sample program src/moran_model_boundary_mutation, that runs the Moran model with boundary mutation (De Maio, N., Schrempf, D., \u0026amp; Kosiol, C. (2015). PoMo: An Allele Frequency-Based Approach for Species Tree Estimation. Systematic Biology, 64(6), 1018–1031. ).\nUsing the chain is as easy as:\n// Define a GNU Scientific Library Matrix object. gsl_matrix * my_transition_rate_matrix = alloc_and_set_matrix(); CTMC my_chain(my_transition_rate_matrix, number_of_states); my_chain.run(a_specific_time); // Now we print some output. my_chain.print_hitting_times(std::cout); my_chain.print_invariant_distribution(std::cout);  If you want to log the path of the chain, you have to activate the log path upon initialization:\nCTMC my_chain(my_transition_rate_matrix, number_of_states, true); // Print the path. my_chain.print_path(std::cout);  Logging the path is disabled by default because it uses a lot of memory.\n","permalink":"https://dschrempf.github.io/coding/2016-04-09-continuous-time-markov-chain/","tags":null,"title":"A simulator for continuous-time Markov chains"},{"categories":["Linux"],"contents":" Did you ever get sick of typing the IP of your SSH server. There is an incredible feature of SSH that saves you a lot of time typing host names, IP addresses or passwords.\nLogin with SSH key First, you want to create your own SSH key so that your server accepts your login without any password.\n# Create an SSH key (use the standard path). Be careful, if you do # not set a passphrase, anybody that has access to your computer can # log into servers that have been set up to accept your key. ssh-keygen # Copy the key on your server. ssh-copy-id yourusername@yourserver.example.com # Try it out and be happy! ssh yourusername@yourserver.example.com  Use ~/.ssh/config Now, it is getting better; edit or create the file ~/.ssh.config:\n#~/.ssh/config Host server HostName yourserver.example.com User yourusername  Try to log into yourserver (now aliased server):\nssh server  Wow, that was fast.\nProxyCommand And it can get better. Very often, the computer privatecomputer that you want to log in, is only accessible from the local network but not from the outside. However, you have access to server which, in turn has access to private.\n  Hmm, normally, you would need to\n# Log into the server. ssh yourusername@yourserver.example.com # Wait. Enter password. Wait. ssh privateusername@privatecomputer.local # Wait. Enter password. Wait. # That sucks.  We can setup SSH keys so that we do not have to enter passwords\n from home to server (we already did that); from server to privatecomputer.local (you can do that now, if you want).  However, we can also do something much more awesome. Put this into your ~/.ssh/config:\n#~/.ssh/config Host server HostName yourserver.example.com User yourusername Host private ProxyCommand ssh -q server -W privatecomputer.local:22 User privateusername  And try it out:\nssh private  Wow.\n","permalink":"https://dschrempf.github.io/linux/2016-04-09-ssh-config/","tags":null,"title":"Configure SSH"},{"categories":["Music"],"contents":" In my free time I love to make music and that\u0026rsquo;s why I am participating in the choir Cantus Novus Wien. We are about 40 people and perform sacred as well as secular music pieces.\nAudio samples Audio samples can be found on Soundcloud.\nA short quote from the homepage (in German) Der Cantus Novus Wien besteht aus engagierten Sängerinnen und Sängern, die am Wiener Diözesankonservatorium für Kirchenmusik zusammenfinden. Das gemeinsame, lebendige Singen zielt auf hohe musikalische Qualität; ein Schwerpunkt ist dabei zeitgenössische Chormusik mit Uraufführungen von Auftragswerken österreichischer Komponisten wie Wolfgang Sauseng, Ruth McGuire, Wolfgang Reisinger, Markus Pfandler und Wolfram Wagner.\nSeit einigen Jahren etabliert sich die Zusammenarbeit mit skandinavischen Künstlern. So gestaltete der Cantus Novus Wien mehrere Konzerte und CD-Aufnahmen gemeinsam mit Musikern und Komponisten aus Schweden und Finnland. Eine Erwähnung verdient das Konzert im Wiener Stephansdom im Mai 2011 gemeinsam mit dem Lidingö Motettkör, dem Originalchor aus dem schwedischen Kinofilm „Wie im Himmel“. Es folgte eine Konzertreise nach Stockholm im Juni 2012.\nZum Repertoire zählen auch große, klassische Chorwerke wie Händels \u0026ldquo;Israel in Ägypten\u0026rdquo; und \u0026ldquo;Messias\u0026rdquo;, Josef Haydns \u0026ldquo;Schöpfung\u0026rdquo; und das \u0026ldquo;Requiem\u0026rdquo; von Mozart. Der Cantus Novus Wien gestaltet immer wieder Gottesdienste, Hochzeiten und kirchliche Veranstaltungen. Regelmäßig werden Chorreisen für Konzerte mit Chören aus dem In- und Ausland unternommen.\n","permalink":"https://dschrempf.github.io/music/2015-08-31-cantus-novus/","tags":null,"title":"Cantus Novus Wien"},{"categories":["Emacs"],"contents":" Introduction Erroneous source code can be a nasty issue to tackle. Print statements that inform you about the states of variables are handy but sometimes they are unable to represent the intrinsic structure of the code. Debuggers allow you to run your code step by step, display and watch variables and see what is going on inside another program while it executes.\nThe GNU poject debugger Here, we will use the GNU project debugger (GDB), because it is freely available, very actively developed and can be used on many operating systems. It can\n start your program, specifying anything that might affect its behavior; make your program stop on specified conditions; examine what has happened, when your program has stopped; change things in your program, so you can experiment with correcting the effects of one bug and go on to learn about another.  GDB in Emacs To debug our program, we will use Emacs and C source code, although gdb can be used from the command line and can debug many different languages.\nA good overview about debugging in Emacs with GDB can be found in the Emacs manual.\nA short step-by-step guide:\n Open and save a new file hello.c with the following contents:\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char* argv[]) { int i; printf(\u0026quot;hello world\\n\u0026quot;); for ( i=0;i\u0026lt;10;++i) { printf(\u0026quot;%d \\n\u0026quot;,i); } return 0; }  Compile it with M-x compile; enter the command gcc -Wall -g hello.c -o hello. Usually, it is very helpful to compile your source code with debugging flags (e.g., -g for gcc), so that nothing is optimized out by the compiler.\n Activate the graphical debugging environment with M-x gdb-many-windows.\n Start the debugger with M-x gdb; enter the command gdb -i=mi hello.\n  From withing the Grand Unified Debugger (GUD) buffer, you can run (r) the program to its end or to the first break point, start (start) and run in until the beginning of the main procedure. You can execute the program line-by-line (n) or step into functions with s.\nBreakpoints can be set from withing the source buffer by clicking on the fringe or with C-x C-a C-b.\nCustomize GDB To permanently set the nice GDB user interface layout, put\n(setq gdb-many-windows t)  into your .emacs file. I have also written a function, that facilitates the starting of the debugger:\n(defvar gdb-my-history nil \u0026quot;History list for dom-gdb-MYPROG.\u0026quot;) (defun dom-gdb-MYPROG () \u0026quot;Debug MYPROG with `gdb'.\u0026quot; (interactive) (let* ((wd \u0026quot;/path/to/working/directory\u0026quot;) (pr \u0026quot;/path/to/executable\u0026quot;) (dt \u0026quot;/path/to/datafile\u0026quot;) (guess (concat \u0026quot;gdb -i=mi -cd=\u0026quot; wd \u0026quot; --args \u0026quot; pr \u0026quot; -s \u0026quot; dt)) (arg (read-from-minibuffer \u0026quot;Run gdb (like this): \u0026quot; guess nil nil 'gdb-my-history))) (gdb arg)))  Window management Upon debugging a program with many source files, GDB displays new source files in (random?) windows in your Emacs frame. This is especially tedious if you use gdb-many-windows. I have written a function dom-gdb-restore-windows, that resets the display and fixes the window layout:\n(defun dom-gdb-restore-windows () \u0026quot;Restore GDB session.\u0026quot; (interactive) (if (eq gdb-many-windows t) (gdb-restore-windows) (dom-gdb-restore-windows-gud-io-and-source))) (defun dom-gdb-restore-windows-gud-io-and-source () \u0026quot;Restore GUD buffer, IO buffer and source buffer next to each other.\u0026quot; (interactive) ;; Select dedicated GUD buffer. (switch-to-buffer gud-comint-buffer) (delete-other-windows) (set-window-dedicated-p (get-buffer-window) t) (when (or gud-last-last-frame gdb-show-main) (let ((side-win (split-window nil nil t)) (bottom-win (split-window))) ;; Put source to the right. (set-window-buffer side-win (if gud-last-last-frame (gud-find-file (car gud-last-last-frame)) (gud-find-file gdb-main-file))) (setq gdb-source-window side-win) ;; Show dedicated IO buffer below. (set-window-buffer bottom-win (gdb-get-buffer-create 'gdb-inferior-io)) (set-window-dedicated-p bottom-win t)))) (defun dom-gdb-display-source-buffer () \u0026quot;Display gdb source buffer if it is set.\u0026quot; (interactive) (when (or gud-last-last-frame gdb-show-main) (switch-to-buffer (if gud-last-last-frame (gud-find-file (car gud-last-last-frame)) (gud-find-file gdb-main-file)))) (delete-other-windows))  ","permalink":"https://dschrempf.github.io/emacs/2015-06-24-debugging-with-emacs-and-gdb/","tags":null,"title":"Debugging with Emacs and GDB"},{"categories":["Linux"],"contents":" Does this sound familiar to you: You come back from a holiday with your family or friends and want to merge photos taken with 4 different cameras. However, somebody forgot to adjust the date (or did not set the daylight saving time accordingly). Hmm.\nThis problem can be solved easily. exiv2 is a program to read and write Exif image metadata and image comments. It offers a very easy command line interface and shortcuts to batch rename files (e.g., by time and date) or to change Exif flags.\nThe exiv2 homepage.\nExamples from the manual Some examples from the manual (man exiv2):\n exiv2 *.jpg Prints a summary of the Exif information for all JPEG files in the directory. exiv2 rename img_1234.jpg Renames img_1234.jpg (taken on 13-Nov-05 at 22:58:31) to 20051113_225831.jpg. exiv2 -r':basename:_%Y%m' rename img_1234.jpg Renames img_1234.jpg to img_1234_200511.jpg. exiv2 -et img1.jpg img2.jpg Extracts the Exif thumbnails from the two files into img1-thumb.jpg and img2-thumb.jpg.  Adjust date and time We use the adjust switch from above:\n ad | adjust Adjust Exif time stamps by the given time. Time adjustment is in the format [-]HH[:MM[:SS]]. Examples: 1 adds one hour, 1:01 adds one hour and one minute, -0:00:30 subtracts 30 seconds.  An example:\nexiv2 adjust -a 1 *.jpg  adds one hour to the time stamp of all JPG files in the working directory.\nBatch rename After you have adjusted the time stamps of the different cameras, you may want to rename the files, e.g.:\nexiv2 rename *.jpg  renames all JPG files in the working directory to date_time.jpg, something very useful.\n","permalink":"https://dschrempf.github.io/linux/2015-04-25-exiv2-command-line-power/","tags":null,"title":"exiv2 command line power"},{"categories":["Linux"],"contents":" Introduction Recently, I have explained how to configure BitTorrent Sync over an SSH SOCKS proxy. However, due to various problems with BTSync, I tried Syncthing and I am very satisfied with it.\nAdvantages that I have experienced so far:\n open source; publicly available synchronization protocol; very reliable if the configuration is fine; it\u0026rsquo;s a young project with motivated developers; it is fast (if enough CPU is available).  Disadvantages that I have experienced so far:\n needs more CPU (this is an issue if you are using devices with very old or slow hardware, e.g., a Raspberry Pi); the configuration is more tedious.  The general setup is very well explained on the project homepages:\n https://syncthing.net/ and https://github.com/syncthing/syncthing.  However, I have the problem, that my computer at work (clientA) is behind a firewall and not exposed to the public. In order to circumvent the firewall, we need a clientB that has full internet access, runs an SSH server and is accessible by clientA; then we can set up SSH such that it forwards connection requests from clientA to the outside and the other way around; check it out.\n  The idea We will use SSH port forwarding to map a port on clientA (let it be port 22111) to a port on the NAT router at my.router.hostname (here I will use port 22222). The router has to redirect the port to the clientC that listens for incoming connections at this specific port with Syncthing (port 20000 here).\nIn more detail, after the configuration below, the port localhost:22111 on clientA will point to a random port on clientB. There, the SSH server redirects the traffic to another random outgoing port and forwards it to my.router.hostname:22222. You still need to setup your router so that it forwards incoming connections to clientC:20000 (many router port forwarding tutorials are available online).\nThis way, we can circumvent the firewall that prevents direct access to my.router.hostname:22222.\nThe setup In order for this to work, you need SSH access from clientA to clientB (let\u0026rsquo;s assume that your user name is user). clientB needs to run an SSH server and have full access to the internet.\nThe forwarding from clientA to the router at my.router.hostname is done by the following SSH command:\nssh -N -vvv -L 22111:my.router.hostname:22222 user@clientB   -N Do not open an interactive session (no commands can be entered at prompt). -vvv Increase verbosity to a high level, so that you can debug problems if you have any (can be removed later). -L This tells SSH to use the SSH server at clientB to map the local (-L) port 22111 on the client that runs the SSH command (in this case clientA) to port 22222 on my.router.hostname. Hence, if localhost:22111 is accessed at clientA, it gets forwarded to the NAT router which in turn has to be set up to forward incoming requests at port number 22222 to , e.g., clientC:22000.  It is important to notice that the forwarding specification (for both, local and remote forwards) consists of 3 parts p1:host:p2. p1 is the port on the client that executes the SSH command; host is the host seen from the SSH server (e.g., clientB) and not from the client executing the command; p2 is the port on host seen from the SSH server. I.e., ssh -L 123:localhost:456 ssh_server forwards port 123 on the client executing the SSH command to port 456 on ssh_server.\nTest the setup The setup can be tested very easily and efficiently with the following method (this method can also be used with other software or ports).\n Close all running Syncthing processes on both sides. Tell clientC to listen on port 22000 by running nc -l -p 22000 on clientC. Access port 22111 on clientA by running nc -v localhost 22111 on clientA. Type some stuff into the terminal at clientA and hope that it is printed at clientC.  If everything works, you can remove the -vvv flag, add a -q flag which tells SSH to be quiet and run the SSH port forwarding at boot.\nssh -N -q -L 22111:my.router.hostname:22222 user@clientB  A good blog article about port forwarding.\nFurthermore, the port forwarding has to be started before Syncthing starts, otherwise there be dragons. I have written a small script that waits some time to start the port forwarding as well as a script that does the same for syncthing.service and syncthing-inotify.service.\nRemote port forwarding Furthermore, if you want to reach clientA from home, remote port forwarding can also be done. However, I did not need this and did not follow it up, e.g.:\nssh -N -q -R 22000:localhost:22200 clientB  This would tell clientB to forward incoming requests at port 22200 to the client that executes the SSH command; in this case, clientA. Take care, GatewayPorts has to be set to yes.\nAmazing stuff Something to think about: Assume a working SSH server on clientC that is accessible by clientA (maybe only via clientB). Suppose, that the IP address of the router is 192.168.1.1 (seen from clientC; local area network). What does the following command (executed on clientA) achieve?\nssh -L 12345:192.168.1.1:80 clientC  Try to access localhost:12345 in your browser at clientA and watch the pure awesomeness!\n","permalink":"https://dschrempf.github.io/linux/2015-04-22-syncthing/","tags":null,"title":"Syncthing with SSH Port Forwarding"},{"categories":["Emacs"],"contents":" Recently, I stumbled upon two nice Emacs minor modes.\nHelm mode Helm mode offers an incremental completion and selection narrowing framework. It will help you to find what you\u0026rsquo;re looking for in Emacs (like buffers, files, commands etc). Resources and discussions can be found at the following homepages:\n development and installation instructions at the Helm mode GitHub page; the Emacs initialization files and configuration of the Helm maintainer; a good overview of the features and a sample configuration.  I can recommend to use the TAB key for completion and not for other actions. You can bind the TAB key back to helm-execute-persistent-action with\n;; Bind TAB to complete stuff. (define-key helm-map (kbd \u0026quot;TAB\u0026quot;) 'helm-execute-persistent-action) ;; Rebind `helm-select-action' (originally bound to TAB). (define-key helm-map (kbd \u0026quot;C-j\u0026quot;) 'helm-select-action)  I had used Ido mode extensively before I switched to Helm mode. I must admit that the first thought was: too heavy and, oh, I miss the insertion with RET as well as that Ido remembers which files I had visited earlier. Also, completion cannot be used when looking for commands with helm-M-x. However, with Helm mode I enjoy most that I get an overview of what is out there. That is what I miss with Ido mode. Try it out yourself!\nHydra mode Hydra mode makes Emacs key bindings stick around so that they can be used without modifiers. It also displays them on the screen, so that rarely used shortcuts can be remembered without looking into the configuration files again (and again and again). It is very useful!\nCheck it out:\n source code and introduction at Hydra mode on GitHub; some blog entries of the creator at (or emacs irrelevant).  ","permalink":"https://dschrempf.github.io/emacs/2015-04-04-helm-hydra-modes/","tags":null,"title":"Emacs Helm and Hydra minor modes"},{"categories":["Coding"],"contents":"I maintain a Github repository that contains a bunch of very basic C++ programs that use Markov chains and other types of simulations to infer basic statistical parameters. The applications mainly focus on Population Genetics problems, although this is not always the case. At the moment, the list of programs is:\n bookshelf.cpp Bookshelf Markov chain brownian_motion_mcmc.cpp Simulate standard Brownian motion (Wiener process) coin_toss_mcmc.cpp Run a coin toss MCMC simulation cube_mcmc.cpp Simulation of a Markov chain that moves around the eight vertices of a cube ehrenfest_mcmc.cpp Simulate gas particles in a divided box general_discrete_distributions.cpp Given K discrete events with different probabilities P[k], produce a random value k consistent with its probability general_discrete_markov_chain.cpp Simulate a general discrete Markov chain with a given transition probability matrix P genetic_drift.cpp Simulate genetic drift hitchhiking.c Simulate hitchhiking along a positively selected locus stepping_stone_model.cpp Simulate Stepping Stone Model with a Markov chain  Please check out the detailed documentation on the github repository.\n","permalink":"https://dschrempf.github.io/coding/2015-03-26-popgen-cpp-programs/","tags":null,"title":"Population genetics C++ programs"},{"categories":["Linux"],"contents":" \u0026lt;2015-04-22 Wed\u0026gt;  I have switched from BitTorrent Sync to Syncthing. Reasons are:\n the synchronization was not reliable (synchronization stalled sometimes; every update leads to a re-synchronization of all files); the corporate policy is not to my liking (a Pro version is available; the free version only supports a limited amount of folders and clients; it is not sure if it will stay free in the future).  Please also refer to the blog entry that describes how to configure Syncthing with SSH port forwarding.\nIntroduction \u0026lt;2015-01-30 Fri\u0026gt;  BitTorrent Sync is a nice program that lets you sync two clients using advanced peer-to-peer technology. It can be a very good replacement for Dropbox if you do not want to share files with others (although you could still use Dropbox for file sharing with others). Especially so, because it does not save any of your data on a server and synchronization is encrypted. Furthermore, it can be installed very easily on Linux (and even on a Mac and on Windows). Please see the installation instructions on their homepage.\nThe problem I had is that one of my clients (say client A) is behind a firewall. In order to circumvent it, we need a client B that has full access to the internet and that is accessible by client A; then we ca set up an SSH SOCKS proxy; check it out.\n  Setup of SSH tunnel In order for this to work, you need SSH access from client A to client B. Client B needs to have access to the internet. Then you can setup a dynamic SSH tunnel at client A with:\nssh -vvv -N -D 1080 username@clientB   -vvv Increase verbosity to a high level, so that you can debug problems if you have any (can be removed later). -N Do not open an interactive session (no commands can be entered at prompt). -D 1080 Dynamically forward all requests to localhost:1080 to client B (act as a SOCKS proxy on port 1080; if you are interested please see, e.g., port forwarding).  If this worked out, every process on client A that accesses localhost:1080 will be forwarded to client B that is outside the firewall. I.e., you could also tell Firefox to use this SOCKS proxy so that you can access sites that you cannot otherwise. Actually this is a very good idea to test if the SOCKS proxy works in general.\nBTSync setup Now, BTSync should automatically find this SOCKS proxy (because it is using the standard port 1080; my BTSync version is 1.4.106) and uses it to circumvent the firewall. The very good and informative debug output of the SSH tunnel can be used to identify possible problems. A sample configuration file looks like this:\n\u0026lt;2015-04-01 Wed\u0026gt;  The automatic detection of the SOCKS proxy did not work anymore (BTSync version 2.0.93). I have adjusted the configuration file below.\n{ \u0026quot;device_name\u0026quot; : \u0026quot;username@clientA\u0026quot;, \u0026quot;listening_port\u0026quot; : 0, // 0 - randomize port. /* The storage_path dir contains auxilliary app files if no storage_path field: .sync dir created in the directory where binary is located. otherwise user-defined directory will be used. */ \u0026quot;storage_path\u0026quot; : \u0026quot;/home/username/.btsync\u0026quot;, // Set location of pid file. \u0026quot;pid_file\u0026quot; : \u0026quot;/home/username/.btsync/btsync.pid\u0026quot;, // Do not use UPnP for port mapping. \u0026quot;use_upnp\u0026quot; : false, // limits in kB/s. 0 - no limit. \u0026quot;download_limit\u0026quot; : 0, \u0026quot;upload_limit\u0026quot; : 0, // Proxy configuration \u0026quot;proxy_type\u0026quot; : \u0026quot;socks4\u0026quot;, // Valid types: \u0026quot;socks4\u0026quot;, \u0026quot;socks5\u0026quot;, \u0026quot;http_connect\u0026quot;. Any other value means no proxy \u0026quot;proxy_addr\u0026quot; : \u0026quot;127.0.0.1\u0026quot;, // IP address of proxy server. \u0026quot;proxy_port\u0026quot; : 1080, // Do not use the webui. \u0026quot;webui\u0026quot; : { \u0026quot;listen\u0026quot; : \u0026quot;0.0.0.0:8889\u0026quot; }, /* !!! If you set shared folders in config file WebUI will be DISABLED !!! Shared directories specified in config file override the folders previously added from WebUI. */ \u0026quot;shared_folders\u0026quot; : [ { \u0026quot;secret\u0026quot; : \u0026quot;MYSECRET\u0026quot;, // required field - use --generate-secret in command line to create new secret \u0026quot;dir\u0026quot; : \u0026quot;/home/username/BTSync\u0026quot;, // * required field \u0026quot;use_relay_server\u0026quot; : true, // use relay server when direct connection fails \u0026quot;use_tracker\u0026quot; : true, \u0026quot;use_dht\u0026quot; : false, \u0026quot;search_lan\u0026quot; : true, \u0026quot;use_sync_trash\u0026quot; : true, // enable SyncArchive to store files deleted on remote devices \u0026quot;overwrite_changes\u0026quot; : false, // restore modified files to original version, ONLY for Read-Only folders \u0026quot;known_hosts\u0026quot; : // specify hosts to attempt connection without additional search [ ] } ] }  ","permalink":"https://dschrempf.github.io/linux/2015-01-30-btsync/","tags":null,"title":"BitTorrent Sync over SSH proxy"},{"categories":["Coding"],"contents":"Suppose we observe 58 heads out of 100 coin tosses. Now, we want to know the probability of tossing a head \\(\\theta\\). A maximum likelihood guess would be \\(\\theta = 0.58\\) because then, the probability of observing 58 heads\n\\begin{align} P(58 \\mathrm{ heads}) = {100 \\choose 58} (0.58)^{58} (0.42)^{42} \\end{align}\nis greatest (an example of the binomial distribution).\nHowever, we could also use a Bayesian approach to calculate the posterior distribution of the probability \\(\\theta\\) (i.e., the probability that \\(\\theta\\) is a certain value conditioned on our observation).\nThe following C++ code does exactly this (the last column is the posterior).\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;iomanip\u0026gt; #include \u0026lt;math.h\u0026gt; #include \u0026lt;gsl/gsl_rng.h\u0026gt; // Run a coin toss MCMC simulation. // User interface. // Observation. int n_tosses = 100; int n_heads = 58; int n_tails = n_tosses - n_heads; // MCMC settings. int n_iter = 10000; int print_every = 500; double delta = 0.1; void fix_width_cout_str (std::string s) { std::cout \u0026lt;\u0026lt; std::setw(10) \u0026lt;\u0026lt; std::fixed \u0026lt;\u0026lt; std::setprecision(2)\u0026lt;\u0026lt; s \u0026lt;\u0026lt; \u0026quot; \u0026quot;; } void fix_width_cout_dbl (double d) { std::cout \u0026lt;\u0026lt; std::setw(10) \u0026lt;\u0026lt; std::fixed \u0026lt;\u0026lt; std::setprecision(2)\u0026lt;\u0026lt; d \u0026lt;\u0026lt; \u0026quot; \u0026quot;; } int main (int argc, char *argv[]) { const gsl_rng_type * t; gsl_rng * r; double theta; // The probability of tossing a head. double posterior[100]; // The posterior. gsl_rng_env_setup(); t = gsl_rng_default; r = gsl_rng_alloc (t); gsl_rng_set (r, 1); // Pick a first guess from the prior distribution (uniform prior). // Here, the prior does not really effect the posterior. However, // it kicks in, when the likelihood ratio for acceptance is // calculated (see below). theta = gsl_rng_uniform (r); std::cout \u0026lt;\u0026lt; \u0026quot;Start MCMC.\u0026quot; \u0026lt;\u0026lt; std::endl; fix_width_cout_str(\u0026quot;iteration\u0026quot;); fix_width_cout_str(\u0026quot;theta_old\u0026quot;); fix_width_cout_str(\u0026quot;theta_pri\u0026quot;); fix_width_cout_str(\u0026quot;ln_tot\u0026quot;); fix_width_cout_str(\u0026quot;pr_of_acc\u0026quot;); fix_width_cout_str(\u0026quot;theta_new\u0026quot;); std::cout \u0026lt;\u0026lt; std::endl; // Initialize posterior. for (int i = 0; i \u0026lt; 100; i++) { posterior[i] = 0.0; } for (int i = 0; i \u0026lt; n_iter; i++) { // Acceptance ratio. double acc; double ln_likelihood_ratio; double ln_prior_ratio; double ln_proposal_ratio; double ln_tot; ////////////////////////////// // Propose a new theta. // Uniform, symmetric jump algorithm (Metropolis algorithm). // The jump algorithm influences the runtime (How many // proposals are accepted?) but it should not change the // posterior; this can be proven for the Metropolos and // the Metropolis-Hastings (non-symmetric jumps) algorithm. double old_theta = theta; double rn = gsl_rng_uniform (r); double theta_prime = theta + (rn - 0.5) * delta; if (theta_prime \u0026lt; 0.0) theta_prime = - theta_prime; if (theta_prime \u0026gt; 1.0) theta_prime = 2.0 - theta_prime; ////////////////////////////// // Accept theta_prime? // Calculate the natural logarithm of the likelihood // ratios of the new proposal to the old one. It consists // of: // 1. The likelihood ratio due to the model. // 2. The ratio of the prior (this is, where the prior // comes in). If the likelihood ratio of the model is // flat (i.e., ln_likelihood_ratio ~= 0.0), the prior is // very informative; something that we do not want in // general. // 3. The ratio of the proposal (the jumping algorithm). // This is, how we incorporate non-symmetric jumping // algorithms, so that they do not change the posterior. ln_likelihood_ratio = (n_heads*log(theta_prime) + n_tails*log(1.0-theta_prime)) - (n_heads*log(theta) + n_tails*log(1.0-theta)); ln_prior_ratio = 0.0; ln_proposal_ratio = 0.0; ln_tot = ln_likelihood_ratio + ln_prior_ratio + ln_proposal_ratio; // Circumvent underflow error. if (ln_tot \u0026lt; -300.0) acc = 0.0; else if (ln_tot \u0026gt; 0.0) acc = 1.0; else acc = exp (ln_tot); // Accept with probability acc. double u = gsl_rng_uniform (r); if (u \u0026lt; acc) { theta = theta_prime; posterior[(int)(theta*100)] += 1.0; } ////////////////////////////// //Log results. if (i % print_every == 0) { fix_width_cout_dbl (i); fix_width_cout_dbl (old_theta); fix_width_cout_dbl (theta_prime); fix_width_cout_dbl (ln_tot); fix_width_cout_dbl (acc); fix_width_cout_dbl (theta); std::cout \u0026lt;\u0026lt; std::endl; } } std::cout \u0026lt;\u0026lt; \u0026quot;MCMC finished.\u0026quot; \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; std::endl; // Normalize posterior. double sum = 0.0; for (int i = 0; i \u0026lt; 100; i++) { sum += posterior[i]; } for (int i = 0; i \u0026lt; 100; i++) { posterior[i] = posterior[i]/sum; } for (int i =0 ; i \u0026lt; 100; i++) { std::cout \u0026lt;\u0026lt; \u0026quot;Theta between \u0026quot;; std::cout \u0026lt;\u0026lt; std::setw(3) \u0026lt;\u0026lt; i; std::cout \u0026lt;\u0026lt; \u0026quot; and \u0026quot;; std::cout \u0026lt;\u0026lt; std::setw(3) \u0026lt;\u0026lt; i+1; std::cout \u0026lt;\u0026lt; \u0026quot;:\\t\u0026quot;; std::cout \u0026lt;\u0026lt; std::setw(4) \u0026lt;\u0026lt; std::setprecision(2) \u0026lt;\u0026lt; (posterior[i]); std::cout \u0026lt;\u0026lt; std::endl; } gsl_rng_free (r); return 0; }  ","permalink":"https://dschrempf.github.io/coding/2015-01-15-mcmc-coin-toss/","tags":null,"title":"A simple MCMC simulation"},{"categories":["Linux"],"contents":"Did you ever need to calculate the time difference between two consecutive time stamps from a log file or something similar? Check out dateutils, it is really useful:\nddiff -i '%H:%M:%S' '19:09:43,683' '19:34:10,350'  ","permalink":"https://dschrempf.github.io/linux/2015-01-07-dateutils/","tags":null,"title":"Dateutils"},{"categories":["Linux"],"contents":"Working with large files takes a long time. Sometimes, it is worth to zip folders individually, so that a single archive does not get too large. GNU Parallel is a shell tool to execute jobs in parallel. Here, I show one of possibly many methods to use it to zip many folders (or files) in parallel.\n Create a file with all folders that you want to zip, e.g with:   ls -1 \u0026gt; folders   Use GNU Parallel to zip them:   parallel -a folders \u0026quot;tar -czf {}.tar.gz {}\u0026quot;  In order to unzip many files at ones (this method can also be used to zip the files if their names follow certain patterns):\nparallel \u0026quot;tar -xzf {}\u0026quot; ::: *.tar.gz  ","permalink":"https://dschrempf.github.io/linux/2015-01-07-gnu-parallel/","tags":null,"title":"Zip folders with GNU Parallel"},{"categories":["Emacs"],"contents":" This homepage was created with Emacs and Org mode. It is hosted at github.io and comments can be done using Disqus. I assume a working Org mode setup and a GitHub as well as a Disqus account.\n\u0026lt;2015-03-26 Thu\u0026gt;  Update; general revision of code and text.\n\u0026lt;2016-04-09 Sat\u0026gt;  Another update.\nGeneral idea  Org mode A great tool for taking notes and exporting them to all kind of formats. One of this formats is HTML. The idea here is to use the publishing capabilities of Org mode to create a very basic website that can be used to blog and publish articles. GitHub Offers a freely available hosting service, a very easy way to make the website available. Disqus Provides the ability to comment posts.  Many people also use Jekyll to create homepages and blogs together with Org mode and GitHub. This is certainly a very appealing alternative but I prefer a setting that is easier to set up and has fewer options.\nFolder structure I decided to use the following folder structure; it is somehow arbitrary but the Org mode publishing setup has to be adjusted accordingly:\n/home/dominik/Shared/blog ├── dschrempf.github.io └── org ├── css ├── js └── posts 8 directories  The folders css and js are self explanatory. Good style sheets are hard to get. I use a neat one from Worg with a few changes. For this setup, it has to be saved as /blog/org/css/site.css. dschrempf.github.io is the git repository of the GitHub homepage (there are detailed explanations on GitHub about how to set it up). The posts created with Org mode reside in the org directory. It is important that you create an index.org file because GitHub is looking for an index.html file and displays it as the main page. You can use all capabilities of Org mode and its export and publishing framework.\nOrg Mode publishing setup This is the main step. Org mode has to know how to export your Org files so that they can be hosted by GitHub:\n\n(setq org-publish-project-alist '( ;; Blog posts in Org mode that are exported to html and hosted ;; by GitHub. (\u0026quot;blog\u0026quot; ;; Directory with Org files. :base-directory \u0026quot;~/Shared/blog/org/\u0026quot; :base-extension \u0026quot;org\u0026quot; ;; Output directory for html files on GitHub. :publishing-directory \u0026quot;~/Shared/blog/dschrempf.github.io/\u0026quot; :publishing-function (org-html-publish-to-html) :html-extension \u0026quot;html\u0026quot; ;; Create a sitemap that contains all posts in ;; anti-chronological order. :auto-sitemap t :sitemap-filename \u0026quot;archive.org\u0026quot; :sitemap-title \u0026quot;Archive\u0026quot; :sitemap-sort-files anti-chronologically :sitemap-style list :recursive t :section-numbers nil :with-toc t ;; Do not include predefined header scripts. :html-head-include-default-style nil :html-head-include-scripts nil :html-head \u0026quot;\u0026lt;link rel='stylesheet' href='/css/site.css' type='text/css'/\u0026gt; \u0026lt;meta name=\\\u0026quot;viewport\\\u0026quot; content=\\\u0026quot;width=device-width\\\u0026quot;/\u0026gt;\u0026quot; :html-preamble website-html-preamble :html-postamble website-html-postamble :html-link-home \u0026quot;http://dschrempf.github.io/\u0026quot; :html-link-use-abs-url nil) (\u0026quot;static\u0026quot; :base-directory \u0026quot;~/Shared/blog/org/\u0026quot; :base-extension \u0026quot;css\\\\|js\\\\|jpg\\\\|gif\\\\|png\\\\|pdf\\\\|mp3\\\\|ogg\\\\|swf\u0026quot; :publishing-directory \u0026quot;~/Shared/blog/dschrempf.github.io/\u0026quot; :publishing-function org-publish-attachment :recursive t) ;; (\u0026quot;website\u0026quot; :components (\u0026quot;blog\u0026quot; \u0026quot;images\u0026quot; \u0026quot;js\u0026quot; \u0026quot;css\u0026quot;)))) (\u0026quot;website\u0026quot; :components (\u0026quot;blog\u0026quot; \u0026quot;static\u0026quot;))))  This defines a set of projects that can be published simultaneously with the project website (e.g. with M-x org-publish website). The preamble includes a small header; the postamble includes the Disqus comment section and Google Analytics (make sure to replace you user name and tracking ID).\n\n;; BugFix: Manually disable home/up links in preamble. (setq org-html-home/up-format \u0026quot;\u0026quot;) (defun website-html-preamble (info) \u0026quot;Org-mode website HTML export preamble.\u0026quot; (format \u0026quot;\u0026lt;div class='nav'\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href='/'\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href='/archive.html'\u0026gt;Archive\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;\u0026quot;)) (defun website-html-postamble (info) \u0026quot;Put Disqus into Org mode website postamble. Do not show disqus for the Archive and the Index.\u0026quot; (concat (cond ((string= (car (plist-get info :title)) \u0026quot;Archive\u0026quot;) \u0026quot;\u0026quot;) ((string= (car (plist-get info :title)) \u0026quot;Index\u0026quot;) \u0026quot;\u0026quot;) ((string= (car (plist-get info :title)) \u0026quot;GitHub -\u0026gt; IO ()\u0026quot;) \u0026quot;\u0026quot;) (t \u0026quot;\u0026lt;div id='disqus_thread'\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type='text/javascript'\u0026gt; // required: replace example with your forum shortname var disqus_shortname = 'YOUR DISQUS NAME HERE'; (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })(); \u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt;\u0026lt;p\u0026gt;Please enable JavaScript to view the \u0026lt;a href='http://disqus.com/?ref_noscript'\u0026gt;comments powered by Disqus.\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/noscript\u0026gt;\u0026quot;)) (format \u0026quot;\u0026lt;div class='footer'\u0026gt; Copyright 2014 AUTHOR\u0026lt;br/\u0026gt; Last updated %s \u0026lt;br/\u0026gt; Built with %s \u0026lt;br/\u0026gt; %s HTML \u0026lt;/div\u0026gt; \u0026lt;script type='text/javascript'\u0026gt; (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','//www.google-analytics.com/analytics.js','ga'); ga('create', 'PUT YOUR TRACKING ID HERE', 'auto'); ga('send', 'pageview'); \u0026lt;/script\u0026gt;\u0026quot; (format-time-string \u0026quot;%Y-%m-%d\u0026quot;) org-html-creator-string org-html-validation-link)))  Workflow Create your homepages with Emacs Org mode. The index.org file can include links to all blog articles. Links, source blocks, images and so on can be used everywhere. This is explained in great detail on the Org mode homepage. Publish the homepage with org-publish (i.e., bind this to a key) and push the changes to GitHub. Voila!\n","permalink":"https://dschrempf.github.io/emacs/2014-12-26-how-to-create-this-homepage/","tags":null,"title":"How to create this homepage"},{"categories":null,"contents":" Postdoc in Evolutionary Biology\nEötvös Loránd University\nInterests  Evolutionary Biology Phylogenetics Markov Chains Functional Programming  Education  PhD in Phylogenetics, Vienna University of Veterinary Medicine, 2017 MSc in Physics, Vienna University of Technology, 2013  Biography Dominik Schrempf is a postdoc in evolutionary biology at the Eötvös Loránd University in Budapest. He is developing models suitable for inferring deep phylogenies, when gene duplication and loss and horizontal gene transfer are abundant.\nDuring his PhD, Dominik Schrempf worked on phylogenetic models accounting for present and ancestral genetic variation which leads to incomplete lineage sorting (PoMo). He focused on finding analytical solutions of models in population genetics to employ in phylogenetic inference. He became particularly intrigued by the connection between discrete and continuous approaches.\n","permalink":"https://dschrempf.github.io/about/","tags":null,"title":"Dominik Schrempf"},{"categories":["Coding"],"contents":"I repeatedly struggle with GHCi when I want to print lists and maps and actually look at them and analyze them. Today I came accross pretty-show, a haskell package that allows pretty printing of all objects that are instances of the type class Show.\nThe usage is very straight forward:\nimport qualified Text.Show.Pretty as Pr  This provides Pr.ppShow which can be used in GHCi (or other interpreters):\nputStrLn $ Pr.ppShow object  ","permalink":"https://dschrempf.github.io/coding/2014-12-23-haskell-pretty-print/","tags":null,"title":"Easy pretty print in Haskell"},{"categories":null,"contents":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. \u0026lt;https://fsf.org/\u0026gt; Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \u0026quot;This License\u0026quot; refers to version 3 of the GNU General Public License. \u0026quot;Copyright\u0026quot; also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u0026quot;The Program\u0026quot; refers to any copyrightable work licensed under this License. Each licensee is addressed as \u0026quot;you\u0026quot;. \u0026quot;Licensees\u0026quot; and \u0026quot;recipients\u0026quot; may be individuals or organizations. To \u0026quot;modify\u0026quot; a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u0026quot;modified version\u0026quot; of the earlier work or a work \u0026quot;based on\u0026quot; the earlier work. A \u0026quot;covered work\u0026quot; means either the unmodified Program or a work based on the Program. To \u0026quot;propagate\u0026quot; a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u0026quot;convey\u0026quot; a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u0026quot;Appropriate Legal Notices\u0026quot; to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \u0026quot;source code\u0026quot; for a work means the preferred form of the work for making modifications to it. \u0026quot;Object code\u0026quot; means any non-source form of a work. A \u0026quot;Standard Interface\u0026quot; means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u0026quot;System Libraries\u0026quot; of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u0026quot;Major Component\u0026quot;, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u0026quot;Corresponding Source\u0026quot; for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u0026quot;keep intact all notices\u0026quot;. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u0026quot;aggregate\u0026quot; if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u0026quot;User Product\u0026quot; is either (1) a \u0026quot;consumer product\u0026quot;, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u0026quot;normally used\u0026quot; refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u0026quot;Installation Information\u0026quot; for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u0026quot;Additional permissions\u0026quot; are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u0026quot;further restrictions\u0026quot; within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u0026quot;entity transaction\u0026quot; is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \u0026quot;contributor\u0026quot; is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u0026quot;contributor version\u0026quot;. A contributor's \u0026quot;essential patent claims\u0026quot; are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u0026quot;control\u0026quot; includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u0026quot;patent license\u0026quot; is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u0026quot;grant\u0026quot; such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u0026quot;Knowingly relying\u0026quot; means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u0026quot;discriminatory\u0026quot; if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u0026quot;or any later version\u0026quot; applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u0026quot;AS IS\u0026quot; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u0026quot;copyright\u0026quot; line and a pointer to where the full notice is found. \u0026lt;one line to give the program's name and a brief idea of what it does.\u0026gt; Copyright (C) \u0026lt;year\u0026gt; \u0026lt;name of author\u0026gt; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see \u0026lt;https://www.gnu.org/licenses/\u0026gt;. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: \u0026lt;program\u0026gt; Copyright (C) \u0026lt;year\u0026gt; \u0026lt;name of author\u0026gt; This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \u0026quot;about box\u0026quot;. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u0026quot;copyright disclaimer\u0026quot; for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see \u0026lt;https://www.gnu.org/licenses/\u0026gt;. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read \u0026lt;https://www.gnu.org/licenses/why-not-lgpl.html\u0026gt;.  ","permalink":"https://dschrempf.github.io/license/","tags":null,"title":"LICENCE"}]